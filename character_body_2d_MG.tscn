[gd_scene load_steps=4 format=3 uid="uid://bydbya8uyfxjl"]

[ext_resource type="Texture2D" uid="uid://c2yg30af21qyk" path="res://icon.svg" id="1_jxu7t"]

[sub_resource type="GDScript" id="GDScript_c7n5w"]
script/source = "extends CharacterBody2D

@export var planet : Node2D

const SPEED = 300.0
const JUMP_VELOCITY = -400.0

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity: int = ProjectSettings.get_setting(\"physics/2d/default_gravity\")

@onready var gravity_direction : Vector2 = Vector2.ZERO
@onready var left_direction : Vector2 = Vector2.LEFT

func _physics_process(delta: float) -> void:
#	Engine.time_scale = 0.5
	
	gravity_direction = planet.global_position - global_position
	var direction_angle : float = gravity_direction.angle() - deg_to_rad(90)

	$Sprite2D.rotation = direction_angle #+ deg_to_rad(90)
	$RayCast2D.target_position = gravity_direction
	
	# Add the gravity.
	if not is_on_floor():
		velocity.y += gravity * delta

	# Handle Jump.
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var direction := Input.get_axis(\"ui_left\", \"ui_right\")
	if direction:
		velocity.x = direction * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
	
	
	print(velocity)
	velocity = velocity.rotated(direction_angle) 
	print(velocity)
	print(\"--------------------------------------\")

	move_and_slide()
"

[sub_resource type="CircleShape2D" id="CircleShape2D_vtj41"]

[node name="CharacterBody2D" type="CharacterBody2D"]
script = SubResource("GDScript_c7n5w")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_vtj41")

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2(0.148, 0.148)
texture = ExtResource("1_jxu7t")

[node name="RayCast2D" type="RayCast2D" parent="."]
